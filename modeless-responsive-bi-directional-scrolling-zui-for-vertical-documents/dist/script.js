(function() {
  var body, boxes, browser, canvas, height, pageProxy, perspective, positionStuff, proxy, proxyHeight, setStuff, snapDuration, snapScrollTo, snapScrolling, targetBox, targetBoxIndex, transitionTimeout, width, windowHeight, windowWidth, x;

  snapDuration = 162;

  browser = $(window);

  body = $("body");

  proxy = $("#proxy");

  pageProxy = $("#pageProxy");

  canvas = $("#canvas");

  boxes = $(".box");

  windowWidth = browser.width();

  windowHeight = browser.height();

  width = body[0].scrollWidth;

  height = body[0].scrollHeight;

  perspective = windowHeight;

  proxyHeight = proxy.height();

  x = 0;

  targetBox = void 0;

  targetBoxIndex = 0;

  //if 'scrollSnapType' in document.documentElement.style || 'webkitScrollSnapType' in document.documentElement.style
  //  isScrollSnapSupported = true
  //else
  //  isScrollSnapSupported = false
  browser.on("scroll", function(event) {
    return requestAnimationFrame(positionStuff);
  });

  browser.resize(function(event) {
    setStuff();
    return requestAnimationFrame(positionStuff);
  });

  //boxes.on "click", ->
  // TODO: trigger snapScrollTo here
  transitionTimeout = null; // set later

  canvas.on("transitionEnd webkitTransitionEnd", function() {
    return canvas.css({
      "-webkit-transition": "none",
      "transition": "none"
    });
  });

  $(function() {
    setStuff();
    return requestAnimationFrame(positionStuff);
  });

  setStuff = function() {
    boxes = $(".box");
    windowWidth = browser.width();
    windowHeight = browser.height();
    width = body[0].scrollWidth;
    height = body[0].scrollHeight;
    perspective = windowHeight;
    return proxyHeight = proxy.height();
  };

  positionStuff = function() {
    var deltaX, left, leftRatio, newTargetBox, newTargetBoxIndex, newX, top, topRatio, y, z;
    left = browser.scrollLeft();
    top = browser.scrollTop();
    leftRatio = left / width;
    topRatio = top / (proxyHeight - windowHeight);
    newX = -leftRatio * width;
    deltaX = x - newX;
    x = newX;
    z = -perspective * 2.5 + topRatio * perspective * 2.5;
    if (z > 0) {
      newTargetBoxIndex = Math.round(leftRatio * boxes.length);
      newTargetBox = boxes[newTargetBoxIndex];
      if (targetBox !== newTargetBox) {
        targetBox = newTargetBox;
        pageProxy.height($(targetBox).height());
      }
      z = 0;
      y = -top + proxyHeight - windowHeight;
    } else {
      y = 0;
    }
    return canvas.css({
      "-webkit-transform": `translate3d(${x}px, ${y}px, ${z}px)`,
      "transform": `translate3d(${x}px, ${y}px, ${z}px)`
    });
  };

  snapScrollTo = function(index) {
    var deltaX, newX, transitionDuration;
    console.log("snapScrolling");
    newX = windowWidth * index;
    deltaX = Math.abs(x + newX);
    transitionDuration = deltaX / 1000;
    canvas.css({
      "-webkit-transition": `-webkit-transform ${transitionDuration}s ease-out`,
      "transition": `transform         ${transitionDuration}s ease-out`
    });
    transitionTimeout = window.setTimeout(function() {
      return canvas.css({
        "-webkit-transition": "none",
        "transition": "none"
      });
    }, transitionDuration * 1000);
    return browser.scrollLeft(newX);
  };

  snapScrolling = function() {
    var leftRatio, newTargetBoxIndex;
    leftRatio = browser.scrollLeft() / width;
    newTargetBoxIndex = Math.round(leftRatio * boxes.length);
    if (browser.scrollLeft() !== newTargetBoxIndex * windowWidth) {
      return snapScrollTo(newTargetBoxIndex);
    }
  };

  browser.on("scroll", _.debounce(snapScrolling, 100));

  browser.on("resize", _.debounce(snapScrolling, 100));

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript